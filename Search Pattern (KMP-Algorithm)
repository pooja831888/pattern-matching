class Solution {
    ArrayList<Integer> search(String pat, String txt) {
     
        int n = txt.length();
        int m = pat.length();
        ArrayList<Integer> result = new ArrayList<>();

        // Step 1: Build LPS array
        int[] lps = new int[m];
        computeLPS(pat, lps);

        int i = 0; // pointer for txt
        int j = 0; // pointer for pat

        // Step 2: Search in txt
        while (i < n) {
            if (txt.charAt(i) == pat.charAt(j)) {
                i++;
                j++;
            }

            if (j == m) {
                result.add(i - j); // 0-based index
                j = lps[j - 1];     // move j to previous possible match
            } else if (i < n && txt.charAt(i) != pat.charAt(j)) {
                if (j != 0) {
                    j = lps[j - 1];
                } else {
                    i++;
                }
            }
        }

        return result;
    }

    // LPS array builder
    void computeLPS(String pat, int[] lps) {
        int len = 0;
        int i = 1;
        lps[0] = 0;

        while (i < pat.length()) {
            if (pat.charAt(i) == pat.charAt(len)) {
                len++;
                lps[i] = len;
                i++;
            } else {
                if (len != 0) {
                    len = lps[len - 1];
                } else {
                    lps[i] = 0;
                    i++;
                }
            }
        }
    }
     
}
